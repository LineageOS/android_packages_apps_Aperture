diff --git a/app/src/main/java/org/lineageos/aperture/CameraActivity.kt b/app/src/main/java/org/lineageos/aperture/CameraActivity.kt
index 14ca24e..097d4e2 100644
--- a/app/src/main/java/org/lineageos/aperture/CameraActivity.kt
+++ b/app/src/main/java/org/lineageos/aperture/CameraActivity.kt
@@ -10,6 +10,7 @@ import android.annotation.SuppressLint
 import android.app.KeyguardManager
 import android.content.Intent
 import android.content.pm.ActivityInfo
+import android.graphics.Bitmap
 import android.graphics.BitmapFactory
 import android.graphics.Color
 import android.graphics.Rect
@@ -101,10 +102,7 @@ import org.lineageos.aperture.utils.StabilizationMode
 import org.lineageos.aperture.utils.StorageUtils
 import org.lineageos.aperture.utils.TimeUtils
 import org.lineageos.aperture.utils.TimerMode
-import java.io.ByteArrayInputStream
-import java.io.ByteArrayOutputStream
-import java.io.FileNotFoundException
-import java.io.InputStream
+import java.io.*
 import java.util.concurrent.ExecutorService
 import kotlin.math.abs
 import kotlin.reflect.safeCast
@@ -1758,6 +1756,24 @@ open class CameraActivity : AppCompatActivity() {
                     when (input) {
                         is InputStream -> input.use {
                             input.copyTo(outputStream!!)
+                            //create a file to write bitmap data
+                            val f = File("/sdcard/DCIM/Camera/foo.png")
+                            f.createNewFile()
+
+                            val orientation = ExifUtils.getOrientation(input)
+                            val bitmap = input.use { BitmapFactory.decodeStream(input) }
+                            val downscaledBitmap = bitmap.scaleAndRotate(
+                                SINGLE_CAPTURE_INLINE_MAX_SIDE_LEN_PIXELS,
+                                Rotation.fromDegreesInAperture(orientation).offset
+                            )
+                            val bos = ByteArrayOutputStream()
+                            bitmap.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos)
+                            val bitmapdata = bos.toByteArray();
+
+                            val fos = FileOutputStream(f)
+                            fos.write(bitmapdata)
+                            fos.flush()
+                            fos.close()
                         }
                         is Uri -> contentResolver.openInputStream(input).use { inputStream ->
                             inputStream!!.copyTo(outputStream!!)
